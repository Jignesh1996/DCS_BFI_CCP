%% Loading the file
filename=strcat('D:\Jignesh\MSc Western Uni\Research MSc\Data\DCS\marianne_10122021\Marianne_12 7 2021_trNIRS DCS TCD BP ECG baseline.mat');
load(filename)

%% Upscaling the data by 3
ecg_a = data(datastart(1):dataend(1));
bp_a = data(datastart(2):dataend(2));
tcd_a = data(datastart(3):dataend(3));

    
%% Plotting the frequency spectrum
Fs = 1000;            % Sampling frequency                    
T = 1/Fs;             % Sampling period    
signal = tcd_a;
L = length(signal);             % Length of signal
t = (0:L-1)*T;  

Y = fft(signal);
P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

f = Fs*(0:(L/2))/L;
plot(f,P1) 
title('Single-Sided Amplitude Spectrum of X(t)')
xlabel('f (Hz)')
ylabel('|P1(f)|')

%% ECG signal Processing
% ecg1 = ecg_a(75420:105600);
ecg1 = ecg_a(1:120000);
ecg1 = normalize(ecg1);
%filter the ECG signal @10Hz using the low pass filter
ecg1 = lpf(ecg1,5,1000)
%% finding the maxima to find the individual signals
y = ecg1;
x = (1:length(ecg1));
[pks,locs] = findpeaks(y, 'MinPeakHeight', 0.5,'MinPeakDist',700,'MinPeakProminence',0.1);  %Determine peaks and Indices
figure()
plot(x,y)
hold on
plot(x(locs),pks, '+r')
hold off
grid

for k1 = 1:numel(locs)-0.1
    yc{k1} = y(locs(k1)-40:locs(k1+1)-40);                            % Define MUAP Frames
    xc{k1} = x(locs(k1)-40:locs(k1+1)-40);
end

figure()
hold all 
for k1 = 1:numel(yc)
   plot(xc{k1}-xc{k1}(1),yc{k1})
end
hold off
grid

% — CALCULATE & PLOT ENSEMBLE AVERAGE —                                                                    
minlen = min(cellfun(@numel, yc));                                     % Minimum Length Of MUAP Records
ens = zeros(minlen, numel(yc));                                        % Preallocate
for k1 = 1:numel(yc)
    ens(:,k1) = yc{k1}(1:minlen);                                      % Trim MUAPs To Shortest Length
end
ensavg = mean(ens,2);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(ens,[],2)/sqrt(numel(yc));                             % Calculate 95% Confidence Intervals
eatv = mean(diff(x))*(0:minlen-1);                                     % Time Vector For Ensemble AVerage
figure()
plot(eatv, ensavg, '-r', 'LineWidth',1)
hold on
plot(eatv, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(eatv, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
xlabel('Time (s)')
ylabel('Amplitude')
title("Ensemble average of ECG signal")
legend('Ensemble Average', '95% Confidence Intervals')

%Repeating the waveform
ensavg = [ensavg; ensavg];
ecg_ens = ensavg*1000;
if length(ecg_ens)<=1600
    ecg_ens(length(ecg_ens):1600) = 1;
else
    ecg_ens = ecg_ens(1:1600);
end
ecg_ens = ecg_ens';
%Saving the variable
writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\Marianne\ecg_ens.csv','Delimiter','comma');

%% TCD signal Processing
tcd = tcd_a(1:120000);
tcd = normalize(tcd);
tcd = lpf(tcd,5,1000);
%% Plotting the TCD signal
minima = islocalmin(tcd,'MinProminence',2,'MinSeparation',800 );
x = 1:length(minima);
plot(x,tcd,x(minima),tcd(minima),'r*');

l = length(tcd);
ini = tcd(200:1099);

cyc =zeros(sum(minima==1)-1,900); 
% cyc(1,:)= ini;
count = 1;
avg = ini;
for i=550:1:length(minima)
    if (minima(i)==1) && (i+899<=length(minima))
        count = count+1;
        plot(tcd(i:i+899))
        hold on
        avg = avg+tcd(i:i+899);
        cyc(count,:) = tcd(i:i+899);
    end
 
end
hold off
avg = avg/count;
x = (1:1:length(avg))/1000;
figure()
plot(avg)

%Plotting the ensemble average
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
figure()
plot(x, ensavg, '-r', 'LineWidth',1)
hold on
plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
legend('Ensemble Average', '95% Confidence Intervals')
xlabel('Time (s)')
ylabel('BFi')
title("Ensemble average of TCD signal")
ensavg = [ensavg ensavg];

tcd_ens = ensavg;
%Saving the variable
% writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\jig\tcd_ens.csv','Delimiter','comma');

%% Processing the blood pressure data
bp = bp_a(1:105600);

minima = islocalmin(bp,'MinProminence',10);
x = 1:length(minima);
plot(x,bp,x(minima),bp(minima),'r*');

l = length(bp);
ini = bp(200:999);

cyc =zeros(sum(minima==1)-1,800); 
cyc(1,:)= ini;
count = 1;
avg = ini;
for i=1000:1:length(minima)
    if (minima(i)==1) && (i+799<=length(minima))
        count = count+1;
        plot(bp(i:i+799))
        hold on
        avg = avg+bp(i:i+799);
        cyc(count,:) = bp(i:i+799);
    end
end
hold off
avg = avg/count;
x = (1:1:800)/1000;
figure()
plot(avg)

%Plotting the ensemble average
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
figure()
plot(x, ensavg, '-r', 'LineWidth',1)
hold on
plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
legend('Ensemble Average', '95% Confidence Intervals')
xlabel('Time (s)')
ylabel('BFi')
title("Ensemble average of TCD signal")
ensavg = [ensavg ensavg];

abd_ens = ensavg;

%Saving the variable
writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\marianne\bp_ens.csv','Delimiter','comma');
%% Processing the DCS data

%% Loading the data for Standalone DCS system
filename=strcat('D:\Jignesh\MSc Western Uni\Research MSc\Data\DCS\20211207\Data.mat');
load(filename)

g2(1,:,:)=squeeze(Data(:,1,:)-1); %g2-1 curve generation
g2_2_temp=squeeze(Data(:,2,:)-1); %g2-1 curve generation
g2_3_temp=squeeze(Data(:,3,:)-1); %g2-1 curve generation
g2_4_temp=squeeze(Data(:,4,:)-1); %g2-1 curve generation

% average g2 curve for large source detector separation
for i=1:size(g2,2)
    g2(2,i,:)=(g2_2_temp(i,:)+g2_3_temp(i,:)+g2_4_temp(i,:))/3;
end

% aDb calculation
rho = [1 3]; %source detector separations in cm 
mua = 0.1; %cm^-1 baseline absorption coefficient
mus = 10; %cm^-1 baseline reduced scattering coefficient

tau_values=Data_tau;

for chan=1:size(g2,1)
    for i=1:size(g2,2)
        rsd=rho(chan);
        g2_temp(i,:)=squeeze(g2(chan,i,:));
        LB = [0];
        UB = [inf];
        Starting = [1e-9]; %[aDb, Beta; cm^2/s, a.u.]
        beta= squeeze(g2(chan,i,1)); %0.1568;
        options = optimset('Display','final','TolX',1e-30,'MaxIter',2000000, 'MaxFunEvals', 200000);
        [FittedParams] = fminsearchbnd(@Brownian_fitting,Starting,LB,UB,options,tau_values,g2_temp(i,:),mua,mus,rsd,beta);
        aDb1(chan,i) = FittedParams(1);
    end
end

dcs_1 = aDb1(1,:).*10^9;
dcs_3 = aDb1(2,:).*10^9;


% Filtering the singal
dcs_1lp = lpf(dcs_1,3,20);
dcs_3lp = lpf(dcs_3,3,20);

%% upsampling the data

dcs_1w = dcs_1lp(1:2400);
dcs_1a = interp(dcs_1w,50);
dcs_3w = dcs_3lp(1:2400);
dcs_3a = interp(dcs_3w,50);


%% Processing the hybrid DCS system data

filename=strcat('D:\study\MSc Western Uni\Research MSc\github\Western-MSc\data\DCS\marianne_10122021\20211207\','Data.mat');
load(filename)



%

g2(1,:,:)=squeeze(Data(:,1,:)-1); %g2-1 curve generation
g2(2,:,:)=squeeze(Data(:,2,:)-1); %g2-1 curve generation
g2(3,:,:)=squeeze(Data(:,3,:)-1); %g2-1 curve generation
g2(4,:,:)=squeeze(Data(:,4,:)-1); %g2-1 curve generation

% aDb calculations

rho = [1 1.5 2 2.5]; %source detector separations in cm 
mua = 0.1; %cm^-1 baseline absorption coefficient
mus = 10; %cm^-1 baseline reduced scattering coefficient

tau_values=Data_tau;

for chan=1:size(g2,1)
    for i=1:size(g2,2)
        rsd=rho(chan);
        g2_temp(i,:)=squeeze(g2(chan,i,:));
        LB = [0];
        UB = [inf];
        Starting = [1e-9]; %[aDb, Beta; cm^2/s, a.u.]
        beta= squeeze(g2(chan,i,1)); %0.1568;
        options = optimset('Display','final','TolX',1e-30,'MaxIter',2000000, 'MaxFunEvals', 200000);
        [FittedParams] = fminsearchbnd(@Brownian_fitting,Starting,LB,UB,options,tau_values,g2_temp(i,:),mua,mus,rsd,beta);
        aDb1(chan,i) = FittedParams(1);
    end
end

%% Data plotting

% time resultion - aqusition time used to aquire data
figure();
t_res=0.25; % seconds
time=t_res*(1:1:size(aDb1,2));

subplot(2,2,1)

plot(time,aDb1(1,:))
title('{\itr}_{SD}=1 cm')
% set(gca,'xticklabel',{})

subplot(2,2,2)

plot(time,aDb1(2,:))
title('{\itr}_{SD}=1.5 cm')
xlabel('Time (s)')

subplot(2,2,3)

plot(time,aDb1(3,:))
title('{\itr}_{SD}=2 cm')
% set(gca,'xticklabel',{})

subplot(2,2,4)

plot(time,aDb1(4,:))
title('{\itr}_{SD}=2.5 cm')
xlabel('Time (s)')


%% Assigning the channels
dcs_1 = aDb1(1,:).*10^9;
dcs_1lp = lpf(dcs_1,3,20);
dcs_15 = aDb1(2,:).*10^9;
dcs_15lp = lpf(dcs_15,3,20);
dcs_2 = aDb1(3,:).*10^9;
dcs_2lp = lpf(dcs_2,3,20);
dcs_25 = aDb1(4,:).*10^9;
dcs_25lp = lpf(dcs_25,3,20);

%% Upsampling the signal
x = 1:1:length(l)
dcs_1up = interp1(x, dcs_1,xq,'linear');

%% Finding the minima to find the starting of the signal
sg_lp_30 = dcs_1a;
sg_lp_30 = normalize(sg_lp_30);
% 
minima = islocalmin(sg_lp_30,'MinSeparation',900, 'ProminenceWindow',1,'MinProminence',1 ,'FlatSelection', 'last');
x = 1:length(minima);
locs = x(minima)
figure();
plot(x,sg_lp_30,x(minima),sg_lp_30(minima),'r*');

%% Plotting the data based on the minima
ini = sg_lp_30(1:850);
cyc =zeros(sum(minima==1)-1,850); 
cyc(1,:)= ini;
count = 1;
avg = ini;
for i=851:1:length(minima)
    if (minima(i)==1) && (i+849<=length(minima))
        count = count+1;
        plot(sg_lp_30(i:i+849))
        hold on
        avg = avg+sg_lp_30(i:i+849);
         cyc(count,:) = sg_lp_30(i:i+849);
        
    end
end
hold off
avg = avg/count;
x = (1:1:length(avg))/1000;
figure()
plot(avg)

%Plotting the ensemble average
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
figure()
plot(x, ensavg, '-r', 'LineWidth',1)
hold on;
plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
legend('Ensemble Average', '95% Confidence Intervals')

ensavg = [ensavg ensavg ensavg];
dcs_1a_ens = ensavg;

%Saving the variable
% writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\marianne\dcs_3cm_ens.csv','Delimiter','comma');





%% Test Space
% Plotting the data of different modality.
% % dcs_1a_raw = normalize(interp(dcs_1,50));
% % dcs_1a_raw = dcs_1a_raw';
% % plot(ecg1);
% % hold on
% % % plot(tcd);
% % plot(normalize(dcs_1a));
% % plot(dcs_1a_raw);
% % legend('ECG','DCS 1.5cm LP Filtered','DCS 1.5cm RAW')
% % title("Signal comparision of ECG, and DCS")
% % xlabel('Samples (Time = samples/1000)');
% ini = sg_lp_30(400:1199);
% cyc =zeros(sum(minima==1)-1,800); 
% cyc(1,:)= ini;
% count = 1;
% avg = ini;
% for i=1200:1:length(minima)
%     if (minima(i)==1) && (i+799<=length(minima))
%         count = count+1;
%         plot(sg_lp_30(i:i+799))
%         hold on
%         avg = avg+sg_lp_30(i:i+799);
%          cyc(count,:) = sg_lp_30(i:i+799);
%         
%     end
% end
% hold off
% avg = avg/count;
% x = (1:1:800)/1000;
% figure()
% plot(avg)
% 
% %Plotting the ensemble average
% ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
% ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
% figure()
% plot(x, ensavg, '-r', 'LineWidth',1)
% hold on;
% plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
% plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
% hold off
% grid
% legend('Ensemble Average', '95% Confidence Intervals')
% 
% ensavg = [ensavg ensavg];
% dcs_1a_ens = ensavg;
% 
% %Saving the variable
% writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\jig\dcs_3cm_ens.csv','Delimiter','comma');
% 

ini = sg_lp_30(400:1199);
cyc =zeros(sum(minima==1)-1,length(ini)); 
cyc(1,:)= ini;
count = 1;
avg = ini;
for i=2:1:length(locs)-1
    count = count+1;
    plot(sg_lp_30(locs(i)+200:locs(i+1)+200))
    sig = sg_lp_30(locs(i)+200:locs(i+1)+200)
    hold on
    if length(avg) > length(sig)
        sig(length(sig):length(avg)) = 0
    elseif length(avg)< length(sig)
        sig = sig(1:length(avg))
    end
    avg = avg+sig;
    cyc(count,:) = sig;
        
end
hold off
avg = avg/count;
x = (1:1:800)/1000;
figure()
plot(avg)

%Plotting the ensemble average
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
figure()
plot(x, ensavg, '-r', 'LineWidth',1)
hold on;
plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
legend('Ensemble Average', '95% Confidence Intervals')

% ensavg = [ensavg ensavg];
% dcs_1a_ens = ensavg;
% 
% %Saving the variable
% writematrix(ensavg,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\jig\dcs_3cm_ens.csv','Delimiter','comma');


%% Creating the exportable fil for the windkessel model
final_data = [ecg_ens; abd_ens ;tcd_ens ;dcs_1a_ens ;dcs_3a_ens]
writematrix(final_data,'D:\Jignesh\MSc Western Uni\Research MSc\Codes\Western-MSc\Codes\Results and Plots\output_variables\jig\final_file.txt','Delimiter','tab');

%% Plotting the data based on the minima for the upsampled signal
ini = sg_lp_30_u(1:48);
cycu =zeros(sum(minima_u==1)-1,48); 
cycu(1,:)= ini;
count_u = 1;
avg = ini;
for i=49:1:length(minima_u)
    if (minima_u(i)==1) && (i+47<=length(minima_u))
        count_u = count_u+1;
        fprintf("%d\n",i)
        plot(sg_lp_30_u(i:i+47))
        hold on
        avg = avg+sg_lp_30_u(i:i+47);
        cycu(count_u,:) = sg_lp_30_u(i:i+47);
    end
end
hold off
x_u = (1:1:48)/60;
avg = avg/count_u;
figure()
plot(x_u,avg)

%Plotting  the ensemble average
ensavg = mean(cycu,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cycu,[],1)/sqrt(count_u);                             % Calculate 95% Confidence Intervals
figure()
plot(x_u, ensavg, '-r', 'LineWidth',1)
hold on
plot(x_u, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x_u, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
legend('Ensemble Average', '95% Confidence Intervals')
xlabel('Time (s)')
ylabel('aDb *10^9')
title("DCS-1.5cm Upsampled signal")

%% Subplotting the original singal and upscaled signal

subplot(1,2,1)
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals                                    
plot(x, ensavg, '-r', 'LineWidth',1)
hold on
plot(x, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
xlabel('Time (s)')
ylabel('aDb *10^9 ')
title("Ensemble average of original signal")
grid
legend('Ensemble Average', '95% Confidence Intervals')

subplot(1,2,2)
ensavg = mean(cycu,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cycu,[],1)/sqrt(count_u);                             % Calculate 95% Confidence Intervals  
plot(x_u, ensavg, '-r', 'LineWidth',1)
hold on
plot(x_u, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x_u, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
xlabel('Time (s)')
ylabel('aDb *10^9')
title("Ensemble average of Upsampled signal")
grid
legend('Ensemble Average', '95% Confidence Intervals')


%% Similar processing for the DCS 3CM data
dcs_3a = data(9650:12000);
sg_lp_30 = dcs3a_sg_lp(1:620);
% sg_lp_30 = interp(sg_lp_30, 3)
% sg_lp_30(393:441) = [];
% sg_lp_30(439:443) = [];
minima3 = islocalmin(sg_lp_30,'MinSeparation',14,'MinProminence',3);
x3 = 1:length(minima3);
figure();
plot(x3,sg_lp_30,x3(minima3),sg_lp_30(minima3),'r*');


ini = sg_lp_30(1:17);
cyc =zeros(sum(minima3==1)-1,17); 
cyc(1,:)= ini;
count = 2;
avg = ini;
for i=18:1:length(minima3)
    if (minima3(i)==1) && (i+16<=length(minima3))
        fprintf("%d\n",i)
        plot(sg_lp_30(i:i+16))
        hold on
        avg = avg+sg_lp_30(i:i+16);
        cyc(count,:) = sg_lp_30(i:i+16);
        count = count+1;
    end
end
hold off
avg = avg/count;
x3 = (1:1:17)/20;
figure()
plot(avg)

%Plotting the ensemble average
ensavg = mean(cyc,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cyc,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
figure()
subplot(1,2,1)
plot(x3, ensavg, '-r', 'LineWidth',1)
hold on
plot(x3, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x3, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
xlabel('Time (s)')
ylabel('aDb *10^9 ')
title('Original Signal')
legend('Ensemble Average', '95% Confidence Intervals')


sg_lp_30_u = interp(sg_lp_30,3);

minima3u = islocalmin(sg_lp_30_u,'MinSeparation',14,'MinProminence',3);
% x3u = 1:length(minima3u);
% figure();
% plot(x3u,sg_lp_30_u,x3u(minima3u),sg_lp_30_u(minima3),'r*');

ini = sg_lp_30_u(1:51);
cycu =zeros(sum(minima3u==1)-1,51); 
cycu(1,:)= ini;
count = 2;
avg = ini;
for i=52:1:length(minima3u)
    if (minima3u(i)==1) && (i+51<=length(minima3u))
        fprintf("%d\n",i)
%         plot(sg_lp_30_u(i:i+50))
%         hold on
        avg = avg+sg_lp_30_u(i:i+50);
        cycu(count,:) = sg_lp_30_u(i:i+50);
        count = count+1;
    end
end
hold off
avg = avg/count;
x3u = (1:1:51)/60;

%Plotting the ensemble average
ensavg = mean(cycu,1);                                                   % Calculate Ensemble Average
ci95 = 1.96*std(cycu,[],1)/sqrt(count);                             % Calculate 95% Confidence Intervals         
subplot(1,2,2)
plot(x3u, ensavg, '-r', 'LineWidth',1)
hold onc
plot(x3u, ensavg+ci95, ':g', 'LineWidth',1.5)
plot(x3u, ensavg-ci95, ':g', 'LineWidth',1.5)
hold off
grid
title('DCS - 2.7cm Upsampled Signal')
xlabel('Time (s)')
ylabel('aDb *10^9 ')
legend('Ensemble Average', '95% Confidence Intervals')